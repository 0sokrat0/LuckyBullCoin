import aiogram
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram import Router, F, Bot
from aiogram.enums import ChatAction, ParseMode, ChatMemberStatus
import app.keyboards as kb
import random
import config as cfg
from database.database import Database
from config import CHANNELS



router = Router()
db = Database(cfg.db_config)


# –°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤
stickers = [
    "CAACAgIAAxkBAAEMFmVmPmsTsFIcuupxwLAYrqmGfk91vQACAQEAAladvQoivp8OuMLmNDUE",
    "CAACAgIAAxkBAAEMFmlmPms0kjm3Qj84IL3sMDWA4sufkgAC2A8AAkjyYEsV-8TaeHRrmDUE",
    "CAACAgIAAxkBAAEMFmtmPmtEAkkKmSBa44SzyKw4t3psxwACSwADUomRI8htaM0_6NrrNQQ",
    "CAACAgIAAxkBAAEMFpxmPpYUnxs4qdj40Vi5UbqMOUtnuQAC8iwAAnDW4UuITBkIiCOD3zUE",
    "CAACAgIAAxkBAAEMFwdmPzDucMmPsrsAASXqR7j4ULRqjmkAAkIQAAIzxSlJkA7UEacqSoI1BA"
]


@router.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    tg_name = message.from_user.username
    referer_id = None
    args = message.text.split()

    if len(args) > 1:
        referer_id = args[1]

    if not db.user_exists(user_id):
        db.add_user(user_id, referer_id, tg_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if referer_id and referer_id != str(user_id):
        num_referrals = db.get_referral_count(referer_id)
        if num_referrals < 5:
            db.add_bonus(referer_id, 100)  # –ù–∞—á–∏—Å–ª—è–µ–º 100 –±–æ–Ω—É—Å–æ–≤ –∑–∞ –ø—Ä—è–º–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            db.add_bonus(user_id, 50)  # –ù–∞—á–∏—Å–ª—è–µ–º 50 –±–æ–Ω—É—Å–æ–≤ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            db.increment_referral_count(referer_id)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

            try:
                await message.bot.send_message(referer_id,
                                               '<b>–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nnew user has registered using your link</b>',
                                               parse_mode=ParseMode.HTML)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
        else:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
            indirect_bonus = 100 * (0.5 ** (num_referrals - 5))
            if indirect_bonus >= 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–Ω—É—Å –Ω–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª
                db.add_bonus(referer_id, indirect_bonus)

    random_sticker = random.choice(stickers)
    await message.answer_sticker(random_sticker)

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!\n\n<b>üåê Choose your language / –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫</b>",
        reply_markup=kb.start_main, parse_mode="HTML"
    )


@router.callback_query(F.data == "Russian")
async def russian(callback_query:CallbackQuery):
    await callback_query.answer('Russian')
    await callback_query.message.answer("*Lucky Bull* ‚Äî —ç—Ç–æ –º–µ–º–∫–æ–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—ã—á—å–µ–≥–æ —Ä—ã–Ω–∫–∞. –ï—Å–ª–∏ —Ç—ã –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç—ã, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º ‚Äî –ø–æ–∫—É–ø–∞–π –∏ –∏–≥—Ä–∞–π!", reply_markup=kb.main_russia, parse_mode=ParseMode.MARKDOWN)


@router.callback_query(F.data == "English")
async def english(callback_query:CallbackQuery):
    await callback_query.answer('English')
    await callback_query.message.answer("*Lucky Bull* is a meme coin that symbolizes the onset of a bull market. If you are an adventurer in the world of crypto, join us ‚Äî buy and play!", reply_markup=kb.main_english, parse_mode=ParseMode.MARKDOWN)

@router.callback_query(F.data == "back_menu")
async def back_menu(callback_query:CallbackQuery):
    await callback_query.answer("–í –º–µ–Ω—é")
    await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",reply_markup=kb.main_russia)

@router.callback_query(F.data == "back_menu_en")
async def back_menu(callback_query:CallbackQuery):
    await callback_query.answer("To menu")
    await callback_query.message.answer(f"Select a menu item",reply_markup=kb.main_english)

stickers_coders = [
    "CAACAgIAAxkBAAEMIUpmRmkET4E4CERSuSPgueS--SGh5wACclMAApc-AAFJ9R9UJhdpZ_U1BA",
    "CAACAgIAAxkBAAEMIUxmRmkIMAWpRsGfdYTXZttdor3z4gACiQoAAnFuiUvTl1zojCsDsDUE",
    "CAACAgIAAxkBAAEMIU5mRmkNjnpOTC6u-wfHwKT54ts_yQACIAkAAhhC7gjhiiCooToK2TUE",
    "CAACAgIAAxkBAAEMIVJmRmkS2oVGskP0hV4YWmcCMTTbugACLDYAAl_dqUgSAAFauJm7kMg1BA",
    "CAACAgIAAxkBAAEMIVRmRmkVp-wFXNCQ81n7v-cuRBw1cgAC-S4AAjeICUpKu11XLwOnnTUE"
]

@router.message(F.text == "üí∞ –ù–∞–≥—Ä–∞–¥—ã")
async def show_rewards(message: Message):
    user_id = message.from_user.id
    num_referrals = db.count_referals(user_id)
    bonus_points = db.get_bonus_points(user_id)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_status = []
    for channel_name, channel_id, _ in CHANNELS:  # –ò–∑–º–µ–Ω–∏–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–º–µ–Ω–∏ –∏ ID
        try:
            member = await message.bot.get_chat_member(channel_id, user_id)
            if member.status in ["member", "administrator", "creator"]:
                subscription_status.append(f"‚úÖ - {channel_name} (+50 po)")
            else:
                subscription_status.append(f"‚ùå - {channel_name} (+50 po)")
        except Exception as e:
            print(f"Error checking channel {channel_name} subscription: {str(e)}")
            subscription_status.append(f"‚ùå - {channel_name} (+50 po)")  # Assume not subscribed on error

    subscriptions_list = "\n".join(subscription_status)

    await message.answer(
        f"ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è (<b>{num_referrals}/5</b>) (–∑–∞ –∫–∞–∂–¥–æ–≥–æ +100 –ø–æ–∏–Ω—Ç–æ–≤)\n{subscriptions_list}\n–£ –≤–∞—Å <b>{bonus_points}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤!",
        parse_mode=ParseMode.HTML,
        reply_markup=kb.generate_subscribe_keyboard()
    )

@router.message(F.text == "üïπÔ∏è –ò–≥—Ä–∞—Ç—å")
async def play_ru(message:Message):
    random_sticker = random.choice(stickers_coders)
    await message.answer_sticker(random_sticker)
    await message.answer("–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã —É–∂–µ –≥–æ—Ç–æ–≤ –≤–æ—Ä–≤–∞—Ç—å—Å—è –≤ –∏–≥—Ä—É, –Ω–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ –Ω–∞–º –Ω–∞–¥–æ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",reply_markup=kb.main_russia)

@router.message(F.text == "üïπÔ∏è Play")
async def play_ru(message:Message):
    random_sticker = random.choice(stickers_coders)
    await message.answer_sticker(random_sticker)
    await message.answer("We are glad that you are ready to break into the game, but we need a little more time to make it better",reply_markup=kb.main_english)


@router.message(F.text == "üí∏–ü—Ä–µ—Å–µ–π–ª")
async def presell_ru(message:Message):
    pay_adress = f"UQD9NwqXuJ1MktBwr5tkmVXYM-4dFeNcE3x8R0_KjgxhyP-Y"
    await message.answer(f"–ß—Ç–æ –±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–µ—Å–µ–π–ª–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ton –Ω–∞ –∞–¥—Ä–µ—Å -\n"f"`{pay_adress}`", reply_markup=kb.main_presell_ru, parse_mode="Markdown")

@router.message(F.text == "üì≤ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
async def connect(message:Message):
    await message.answer("–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —á—É—Ç—å –ø–æ–∑–∂–µ",reply_markup=kb.main_russia)
    # await message.answer(f"–ø–æ–¥–∫–ª—é—á–∏ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∏–≥—Ä–æ–π", reply_markup=kb.main_russia_connect, parse_mode=ParseMode.HTML)

@router.message(F.text =="‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message:Message):
    user_id = message.from_user.id
    num_referals = db.count_referals(message.from_user.id)
    bonus = db.get_bonus_points(user_id)
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    await message.answer(f"<u>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</u>\n\nID:<b> {message.from_user.id}</b>\n–ò–º—è:<b> {message.from_user.username}</b>\n–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:<b> {num_referals}</b>\n–ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ <b> {bonus}</b>", parse_mode=ParseMode.HTML,reply_markup=kb.main_russia)

@router.message(F.text =="ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def referal (message:Message):
    referral_link = f"https://t.me/{cfg.bot_name}?start={message.from_user.id}"
    response_text = (
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º! –ó–∞ –ø–µ—Ä–≤—ã—Ö 5 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö ‚Äî 500 –±–æ–Ω—É—Å–æ–≤ —Å—Ä–∞–∑—É, –∏ –ø–æ 100 –±–æ–Ω—É—Å–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ.\n\n"
        "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"`{referral_link}`"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –∫–æ–¥
    )

    await message.answer(response_text, parse_mode="Markdown", reply_markup=kb.main_russia)


async def check_user_subscriptions_and_add_bonuses(bot: Bot, user_id: int, db):
    successful_subscriptions = []
    for index, channel in enumerate(CHANNELS):
        channel_name, channel_id, channel_url = channel[0], channel[1], channel[2]
        bonus_amount = cfg.BONUSES[index]  # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª—É
        try:
            member = await bot.get_chat_member(channel_id, user_id)
            if member.status in ["member", "administrator", "creator"]:
                if not db.has_received_bonus_for_channel(user_id, channel_id):
                    db.add_bonus(user_id, bonus_amount)
                    db.mark_bonus_received_for_channel(user_id, channel_id)
                    successful_subscriptions.append(channel_name)
        except Exception as e:
            print(f"Error checking subscription for {channel_name} ({channel_id}): {str(e)}")
    return successful_subscriptions

async def check_all_subscriptions(bot: Bot, user_id: int):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ. """
    try:
        for _, channel_id, _ in CHANNELS:
            member = await bot.get_chat_member(channel_id, user_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if member.status not in ["member", "administrator", "creator"]:
                return False
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


@router.message(F.text == "üåê –Ø–∑—ã–∫")
async def language(message: Message):
    await message.answer("üåê <b>Choose your language / –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫</b>",parse_mode=ParseMode.HTML,reply_markup=kb.start_main)

@router.message(F.text == "üåê Language")
async def language(message: Message):
    await message.answer("üåê <b>Choose your language / –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫</b>",parse_mode=ParseMode.HTML,reply_markup=kb.start_main)
async def check_user_subscriptions_and_add_bonuses(bot: Bot, user_id: int, db):
    successful_subscriptions = []
    for index, channel in enumerate(CHANNELS):
        channel_name, channel_id, channel_url = channel[0], channel[1], channel[2]
        bonus_amount = cfg.BONUSES[index]  # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª—É
        try:
            member = await bot.get_chat_member(channel_id, user_id)
            if member.status in ["member", "administrator", "creator"]:
                if not db.has_received_bonus_for_channel(user_id, channel_id):
                    db.add_bonus(user_id, bonus_amount)
                    db.mark_bonus_received_for_channel(user_id, channel_id)
                    successful_subscriptions.append(channel_name)
        except Exception as e:
            print(f"Error checking subscription for {channel_name} ({channel_id}): {str(e)}")
    return successful_subscriptions

async def check_all_subscriptions(bot: Bot, user_id: int):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ. """
    try:
        for _, channel_id, _ in CHANNELS:
            member = await bot.get_chat_member(channel_id, user_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if member.status not in ["member", "administrator", "creator"]:
                return False
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@router.callback_query(F.data == "checksub")
async def check_subscription(callback_query: CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    all_subscribed = await check_all_subscriptions(bot, user_id)

    if all_subscribed:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç bot, –∞ –Ω–µ —á–µ—Ä–µ–∑ callback_query
        await bot.send_sticker(callback_query.from_user.id, "CAACAgIAAxkBAAEMIVxmRmu4e7_UAikXkBkCgRACCcNnngACrjAAAnx_uEp6KcLM_EAS-TUE")
        await callback_query.message.answer(
            "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã!",
            reply_markup=kb.main_russia
        )
    else:
        successful_subscriptions = await check_user_subscriptions_and_add_bonuses(bot, user_id, db)
        if successful_subscriptions:
            subscriptions_list = ", ".join(successful_subscriptions)
            await callback_query.message.answer(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: {subscriptions_list}. –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.",
                reply_markup=kb.main_russia
            )
        else:
            await callback_query.message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤.",
                reply_markup=kb.main_russia
            )

    await callback_query.answer()

@router.callback_query(F.data == "checksub_en")
async def check_subscription(callback_query: CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    all_subscribed = await check_all_subscriptions(bot, user_id)

    if all_subscribed:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç bot, –∞ –Ω–µ —á–µ—Ä–µ–∑ callback_query
        await bot.send_sticker(callback_query.from_user.id, "CAACAgIAAxkBAAEMIVxmRmu4e7_UAikXkBkCgRACCcNnngACrjAAAnx_uEp6KcLM_EAS-TUE")
        await callback_query.message.answer(
            "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã!",
            reply_markup=kb.main_russia
        )
    else:
        successful_subscriptions = await check_user_subscriptions_and_add_bonuses(bot, user_id, db)
        if successful_subscriptions:
            subscriptions_list = ", ".join(successful_subscriptions)
            await bot.send_message(callback_query.from_user_id,"CAACAgIAAxkBAAEMIWlmRm_1P-jRYitSrI92MhIHzTApbwACYgMAAm2wQgOZk6ig1YUjNTUE")
            await callback_query.message.answer(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: {subscriptions_list}. –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.",
                reply_markup=kb.main_russia
            )
        else:
            await bot.send_message(callback_query.from_user_id,"CAACAgIAAxkBAAEMIWVmRm9Ui6FPUCweVZ4ft21DwCqdLwACcgMAAm2wQgN8hjxqMH187jUE")
            await callback_query.message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤.",
                reply_markup=kb.main_russia
            )

    await callback_query.answer()


@router.message(F.text == "üí∏Presale")
async def presell_ru(message:Message):
    pay_adress = f"UQD9NwqXuJ1MktBwr5tkmVXYM-4dFeNcE3x8R0_KjgxhyP-Y"
    await message.answer(f"To participate in the presale, you need to send a ton to the address\n"f"`{pay_adress}`", reply_markup=kb.main_presell_en, parse_mode="Markdown")

@router.message(F.text == "üì≤ Connect Wallet")
async def connect(message:Message):
    await message.answer(f"You will be able to connect the wallet a little later", reply_markup=kb.main_english, parse_mode=ParseMode.HTML)
    # await message.answer(f"Connect your wallet to receive bonuses and fully enjoy the game", reply_markup=kb.main_en_connect, parse_mode=ParseMode.HTML)

@router.message(F.text =="‚öôÔ∏è Profile")
async def profile(message:Message):
    user_id = message.from_user.id
    num_referals = db.count_referals(message.from_user.id)
    bonus = db.get_bonus_points(user_id)
    await message.answer(f"<u>Your profile</u>\n\nID:<b> {message.from_user.id }</b>\nName:<b> {message.from_user.username}</b>\nNumber of referrals: <b> {num_referals}\n</b>Number of bonuses <b> {bonus}</b>", parse_mode=ParseMode.HTML,reply_markup=kb.main_english)

@router.message(F.text =="ü§ù Referral Link")
async def referal (message:Message):
    referral_link = f"https://t.me/{cfg.bot_name}?start={message.from_user.id}"
    response_text = (
        "Invite your friends and engage in joint development! For the first 5 invited ‚Äî 500 bonuses at once, and 100 bonuses for each next one.\n\n"
        "Your referral link:\n"
        f"`{referral_link}`"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –∫–æ–¥
    )
    await message.answer(response_text, parse_mode="Markdown", reply_markup=kb.main_english)

@router.message(F.text == "üí∞ Rewards")
async def show_rewards(message: Message):
    user_id = message.from_user.id
    num_referrals = db.count_referals(user_id)
    bonus_points = db.get_bonus_points(user_id)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_status = []
    for channel_name, channel_id, _ in CHANNELS:  # –ò–∑–º–µ–Ω–∏–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–º–µ–Ω–∏ –∏ ID
        try:
            member = await message.bot.get_chat_member(channel_id, user_id)
            if member.status in ["member", "administrator", "creator"]:
                subscription_status.append(f"‚úÖ - {channel_name} (+50 po)")
            else:
                subscription_status.append(f"‚ùå - {channel_name} (+50 po)")
        except Exception as e:
            print(f"Error checking channel {channel_name} subscription: {str(e)}")
            subscription_status.append(f"‚ùå - {channel_name} (+50 po)")  # Assume not subscribed on error

    subscriptions_list = "\n".join(subscription_status)

    await message.answer(
        f"ü§ù Invited friends (<b>{num_referrals}/5</b>) (for each +100 points)\n{subscriptions_list}\n You have <b>{bonus_points}</b> bonus points!",
        parse_mode=ParseMode.HTML,
        reply_markup=kb.generate_subscribe_keyboard_en()
    )


@router.message(Command("admin_panel"), F.from_user.id.in_(cfg.ADMINS))
async def admin_panel(message: Message):
    import logging
    logging.info(f"Admin command accessed by {message.from_user.id}")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.admin)


@router.callback_query(F.data == "admin_analytics")
async def admin_analytics(callback_query: CallbackQuery):
    try:
        stats = db.get_detailed_user_statistics()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        analytics_data = (
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é): {stats['active_users']}\n"
            f"–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é): {stats['new_users']}\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {stats['average_bonus_per_user']:.2f}\n"
            f"–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤: {stats['total_bonus']}"
        )
        await callback_query.message.edit_text(analytics_data)
    except Exception as e:
        await callback_query.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
